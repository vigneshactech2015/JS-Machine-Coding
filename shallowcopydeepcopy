// shallow copy 
// creates new object but only copies the references of nested objects not the original actual nested object
// useful for simple object . 
// Faster and less resource intensive
// changes affect the original object
const obj1 = {
  "name":"vignesh",
  "address":{
    "city":"chennai"
  }
}

const obj2 = {...obj1}
obj2.address.city = "bangalore"
console.log('...shallow copy',obj1.address.city)

// deep copy --> creates new object and recursively copies all nested object
// useful for complex deeply nested object
// slower and more resource intensive
// changes does not affect original object
const obj = {
  "name":"vignesh",
  "address":{
    "city":"chennai"
  }
}

const deepcopy = JSON.parse(JSON.stringify(obj))
deepcopy.address.city = 'bangalore'
console.log('...deep copy',obj.address.city)

// Another method to deep clone

function deepClone(obj) {
  // Handle null or non-object types (primitives)
  if (obj === null || typeof obj !== 'object') {
    return obj;
  }

  // Handle Date objects
  if (obj instanceof Date) {
    return new Date(obj.getTime());
  }

  // Handle Arrays
  if (Array.isArray(obj)) {
    const arrCopy = [];
    for (const item of obj) {
      arrCopy.push(deepClone(item));
    }
    return arrCopy;
  }

  // Handle Objects
  const cloneObj = {};
  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      cloneObj[key] = deepClone(obj[key]);
    }
  }
  return cloneObj;
}

