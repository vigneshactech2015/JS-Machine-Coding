1) Promise.all([])

  * takes array of promise
  * wait till all the promises are resolved
  * if some promise fails then throws an error

2) Promise.allSettled([])

  * suppose 10 Api Call , 9 success and 1 failure then we get
array of promises with 9 success and 1 error message

3) Promise.race([])

  * We get result of 1st settled promise which can either be success/failure

4) Promise.any([])

  * Wait for 1st success promise.
  * Doesn't throw error.
  * If everything fails return result will be aggregated error -> array of all error message

Promise.all example 

const apiEndPoints = ["api1","api2","api3"]

const fetchProductData = async (urls) => {
  try{
  const response = await Promise.all(
   urls.map(async(url)=>{
   const res = await fetch(url);
  if(!res.ok) throw new Error("Failed to fetch")
  return await res.json()
}
  )
  console.log("Fetched data",response)
 }catch(err){
 console.log(err)
}
}

fetchProductData(apiEndPoints)
