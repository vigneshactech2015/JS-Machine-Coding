1) Promise.all([])

  * takes array of promise
  * wait till all the promises are resolved
  * if some promise fails then throws an error

2) Promise.allSettled([])

  * suppose 10 Api Call , 9 success and 1 failure then we get
array of promises with 9 success and 1 error message

3) Promise.race([])

  * We get result of 1st settled promise which can either be success/failure

4) Promise.any([])

  * Wait for 1st success promise.
  * Doesn't throw error.
  * If everything fails return result will be aggregated error -> array of all error message

Promise.all example 

const apiEndPoints = ["api1","api2","api3"]

const fetchProductData = async (urls) => {
  try{
  const response = await Promise.all(
   urls.map(async(url)=>{
   const res = await fetch(url);
  if(!res.ok) throw new Error("Failed to fetch")
  return await res.json()
}
  )
  console.log("Fetched data",response)
 }catch(err){
 console.log(err)
}
}

fetchProductData(apiEndPoints)


// Real use case of promise : 

// here I want to call audio one by one . First audio language to be english rest whatever audio being passed

const textToSpeech = async (text: string, languageCode: string = 'en-US') => {
  return new Promise<void>(async (resolve, reject) => {
    try {
      const apiKey = process.env.REACT_APP_TEXTTOSPEECHKEY;
      const url = `https://texttospeech.googleapis.com/v1/text:synthesize?key=${apiKey}`;

      const requestBody = {
        input: { text },
        voice: {
          languageCode,
          ssmlGender: 'NEUTRAL'
        },
        audioConfig: {
          audioEncoding: 'MP3'
        }
      };

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      });

      const data = await response.json();

      if (data.audioContent) {
        const audio = new Audio(`data:audio/mp3;base64,${data.audioContent}`);
        audio.onended = () => resolve();
        audio.onerror = (e) => reject(e);
        audio.play();
      } else {
        console.error('Failed to synthesize speech', data);
        resolve();
      }
    } catch (err) {
      console.log(err)
      resolve();
    }
  });
};



  useEffect(() => {
    const handleMessage = async () => {
      if (lastMessage && isValidJSON(lastMessage.data)) {
        const msg = lastMessage?.data || '';
        const message = JSON.parse(msg);

        console.info("================Message received ==================");
        console.info(message);
        console.info("================Message received ==================");
        getTokenSystemList();

        if (
          message.action === 'start' &&
          message.hospitalId === user?.id &&
          message.topic === 'token_call' &&
          (message.callinfo === 'nextpatient' && user?.role === 'Token')
        ) {
          const audioText: string = message?.patientName
            ? `Token Number ${message.tokenNumber} - ${message.patientName}`
            : `Token Number ${message.tokenNumber}`;
          setRetryCount(0);

          const getCurrentUser = async () => {
            try {
              const response = await getHttpClient(CurrentUser.me, 'GET');
              return response?.data?.audio_language;
            } catch (err) {
              console.log(err);
              return 'ENGLISH';
            }
          };

          const audioLanguage = await getCurrentUser() ?? 'ENGLISH';

          for (let i = 1; i <= 3; i++) {
             await textToSpeech(audioText, i===1?languageToCode["ENGLISH"]:languageToCode[audioLanguage]);
          }
        }
      }
    };

    handleMessage();
  }, [lastMessage, user, language]);
